// Увеличение символов из точки
public void SetText( string text ) 
{
    _startTransitionTime = Time.unscaledTime;

    _textGUI.SetText( text );
    _textGUI.ForceMeshUpdate();

    var textInfo = _textGUI.textInfo;
    originPositions = new Vector3[textInfo.meshInfo[0].vertices.Length];
    textInfo.meshInfo[0].vertices.CopyTo( originPositions, 0 );

}

private void Awake()
{
    _textGUI = GetComponent<TextMeshProUGUI>();
}

private void Update()
{
    if( _textGUI.text.Length == 0 ) {
        return;
    }
    var textInfo = _textGUI.textInfo;

    // Увеличение символов из точки
    for( int i = 0; i < textInfo.characterCount; i++ ) {
        var charInfo = textInfo.characterInfo[i];
        if( !charInfo.isVisible ) {
            continue;
        }

        var verts = textInfo.meshInfo[charInfo.materialReferenceIndex].vertices;

        Vector3 center = (originPositions[charInfo.vertexIndex] + originPositions[charInfo.vertexIndex + 2])/ 2;
        for( int j = 0; j < 4; j++ ) {
            var orig = originPositions[charInfo.vertexIndex + j];
            verts[charInfo.vertexIndex + j] = Vector3.Lerp( center, orig, Mathf.Clamp( _transitionSpeed * (Time.unscaledTime - _startTransitionTime), 0f, 1f ) );
        }
    }

    for( int i = 0; i < textInfo.meshInfo.Length; i++ ) {
        var meshInfo = textInfo.meshInfo[i];
        meshInfo.mesh.vertices = meshInfo.vertices;
        _textGUI.UpdateGeometry( meshInfo.mesh, i );
    }
}

private TextMeshProUGUI _textGUI;// Соответствующий обработчику элемент GUI, занимающийся отображением текста

private float _startTransitionTime;// Время начала перехода.

private float _transitionSpeed = 7f;

Vector3[] originPositions;